{
  "openapi": "3.0.1",
  "info": {
    "title": "AI Gateway API",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://api.us-east-1.langdb.ai",
      "description": "LangDB API Server"
    }
  ],
  "paths": {
    "/chat/completions": {
      "post": {
        "operationId": "createChatCompletion",
        "tags": [
          "Chat"
        ],
        "summary": "Creates a model response.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChatCompletionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateChatCompletionResponse"
                }
              }
            }
          }
        },
        "x-oaiMeta": {
          "name": "Create chat completion",
          "group": "chat",
          "returns": "Returns a [chat completion](/docs/api-reference/chat/object) object, or a streamed sequence of [chat completion chunk](/docs/api-reference/chat/streaming) objects if the request is streamed.\n",
          "path": "create",
          "examples": [
            {
              "title": "Default",
              "request": {
                "curl": "curl https://api.staging.langdb.ai/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $LANGDB_API_KEY\" \\\n  -d '{\n    \"model\": \"VAR_model_id\",\n    \"messages\": [\n      {\n        \"role\": \"system\",\n        \"content\": \"You are a helpful assistant.\"\n      },\n      {\n        \"role\": \"user\",\n        \"content\": \"Hello!\"\n      }\n    ]\n  }'\n",
                "python": "from openai import OpenAI\nclient = OpenAI()\n\ncompletion = client.chat.completions.create(\n  model=\"VAR_model_id\",\n  messages=[\n    {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n    {\"role\": \"user\", \"content\": \"Hello!\"}\n  ]\n)\n\nprint(completion.choices[0].message)\n",
                "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const completion = await openai.chat.completions.create({\n    messages: [{ role: \"system\", content: \"You are a helpful assistant.\" }],\n    model: \"VAR_model_id\",\n  });\n\n  console.log(completion.choices[0]);\n}\n\nmain();"
              },
              "response": "{\n  \"id\": \"chatcmpl-123\",\n  \"object\": \"chat.completion\",\n  \"created\": 1677652288,\n  \"model\": \"gpt-4o-mini\",\n  \"system_fingerprint\": \"fp_44709d6fcb\",\n  \"choices\": [{\n    \"index\": 0,\n    \"message\": {\n      \"role\": \"assistant\",\n      \"content\": \"\\n\\nHello there, how may I assist you today?\",\n    },\n    \"logprobs\": null,\n    \"finish_reason\": \"stop\"\n  }],\n  \"usage\": {\n    \"prompt_tokens\": 9,\n    \"completion_tokens\": 12,\n    \"total_tokens\": 21,\n    \"completion_tokens_details\": {\n      \"reasoning_tokens\": 0,\n      \"accepted_prediction_tokens\": 0,\n      \"rejected_prediction_tokens\": 0\n    }\n  }\n}\n"
            }
          ]
        },
        "security": [
          {
            "BearerAuth": [],
            "ProjectIdAuth": []
          }
        ]
      }
    },
    "/models": {
      "get": {
        "operationId": "listModels",
        "tags": [
          "Models"
        ],
        "summary": "Lists available models.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListModelsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [],
            "ProjectIdAuth": []
          }
        ]
      }
    },
    "/trace/{trace_id}": {
      "get": {
        "operationId": "getTrace",
        "tags": [
          "Trace"
        ],
        "summary": "Retrieve a trace by ID.",
        "description": "Returns detailed information about a trace, including logs, cost, and more.\n",
        "parameters": [
          {
            "name": "trace_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The UUID of the trace"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TraceResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [],
            "ProjectIdAuth": []
          }
        ]
      }
    },
    "/pricing": {
      "get": {
        "operationId": "getPricing",
        "tags": [
          "Pricing"
        ],
        "summary": "Retrieve pricing information",
        "description": "Returns the pricing details for LangDB services.",
        "responses": {
          "200": {
            "description": "Successful retrieval of pricing information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelPricing"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer"
      },
      "ProjectIdAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Project-Id"
      }
    },
    "schemas": {
      "AuthStartResult_Saved": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "Saved"
            ],
            "description": "Indicates that saved credentials are being used."
          }
        }
      },
      "AuthStartResult_ExternalLoginLink": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "ExternalLoginLink"
            ],
            "description": "Indicates that an external OAuth login link is provided."
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "URL to redirect the user for OAuth authentication."
          }
        },
        "required": [
          "status",
          "url"
        ]
      },
      "AuthStartResult_OtpSent": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "OtpSent"
            ],
            "description": "Indicates that an OTP has been sent for authentication."
          }
        }
      },
      "AuthStartResult_RequireEmailAndPassword": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "RequireEmailAndPassword"
            ],
            "description": "Indicates that email and password are required for authentication."
          }
        }
      },
      "CallbackRequest": {
        "type": "object",
        "properties": {
          "params": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Callback parameters received from the integration"
          }
        },
        "required": [
          "params"
        ]
      },
      "AuthResult_TokenInfo": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "TokenInfo"
            ]
          },
          "access_token": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string",
            "nullable": true
          },
          "expires_in": {
            "type": "integer",
            "nullable": true
          },
          "token_type": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "type",
          "access_token"
        ]
      },
      "AuthResult_CookieWithToken": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "CookieWithToken"
            ]
          },
          "cookies": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "token_info": {
            "$ref": "#/components/schemas/TokenInfo"
          }
        },
        "required": [
          "type",
          "cookies",
          "token_info"
        ]
      },
      "AuthResult_Cookies": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Cookies"
            ]
          },
          "cookies": {
            "type": "string",
            "description": "Serialized cookies string"
          }
        },
        "required": [
          "type",
          "cookies"
        ]
      },
      "TokenInfo": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string",
            "nullable": true
          },
          "expires_in": {
            "type": "integer",
            "nullable": true
          },
          "token_type": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "access_token"
        ]
      },
      "Parameter": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Parameter name"
          },
          "type": {
            "type": "string",
            "description": "Data type of the parameter"
          },
          "required": {
            "type": "boolean",
            "description": "Whether the parameter is required"
          },
          "description": {
            "type": "string",
            "description": "Description of the parameter"
          }
        },
        "required": [
          "name",
          "type",
          "required"
        ]
      },
      "VirtualTableResponse": {
        "type": "object",
        "properties": {
          "resources": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Resource"
            },
            "description": "Mapping of resource names to their definitions."
          },
          "columns": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/TableField"
            },
            "description": "Mapping of resource names to their column schemas."
          },
          "configs": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ConfigSchema"
            },
            "description": "Mapping of resource names to their configuration schemas."
          }
        },
        "required": [
          "resources",
          "columns",
          "configs"
        ]
      },
      "Resource": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique identifier for the resource."
          },
          "type": {
            "type": "string",
            "description": "Type of the resource (e.g., table, view)."
          },
          "description": {
            "type": "string",
            "description": "Human-readable description of the resource."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the resource was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the resource was last updated."
          }
        },
        "required": [
          "name",
          "type",
          "description",
          "created_at",
          "updated_at"
        ]
      },
      "TableField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the field/column"
          },
          "type": {
            "type": "string",
            "description": "Data type of the field"
          },
          "description": {
            "type": "string",
            "description": "Description of the field"
          },
          "nullable": {
            "type": "boolean",
            "description": "Indicates if the field can be null"
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "ConfigSchema": {
        "type": "object",
        "description": "Configuration details for the resource.",
        "additionalProperties": true
      },
      "CreateChatCompletionRequest": {
        "type": "object",
        "properties": {
          "messages": {
            "description": "A list of messages comprising the conversation so far. Depending on the\n[model](/docs/models) you use, different message types (modalities) are\nsupported, like [text](/docs/guides/text-generation),\n[images](/docs/guides/vision), and [audio](/docs/guides/audio).\n",
            "type": "array",
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/ChatCompletionRequestMessage"
            }
          },
          "model": {
            "description": "ID of the model to use.",
            "example": "gpt-4o"
          },
          "store": {
            "type": "boolean",
            "default": false,
            "nullable": true,
            "description": "Whether or not to store the output of this chat completion request.\n"
          },
          "metadata": {
            "type": "object",
            "nullable": true,
            "description": "Developer-defined tags and values used for filtering completions.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "frequency_penalty": {
            "type": "number",
            "default": 0,
            "minimum": -2,
            "maximum": 2,
            "nullable": true,
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.\n\n[See more information about frequency and presence penalties.](/docs/guides/text-generation)\n"
          },
          "logit_bias": {
            "type": "object",
            "x-oaiTypeLabel": "map",
            "default": null,
            "nullable": true,
            "additionalProperties": {
              "type": "integer"
            },
            "description": "Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.\n"
          },
          "logprobs": {
            "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`.",
            "type": "boolean",
            "default": false,
            "nullable": true
          },
          "top_logprobs": {
            "description": "An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.",
            "type": "integer",
            "minimum": 0,
            "maximum": 20,
            "nullable": true
          },
          "max_tokens": {
            "description": "The maximum number of [tokens](/tokenizer) that can be generated in the chat completion.",
            "type": "integer",
            "nullable": true,
            "deprecated": true
          },
          "max_completion_tokens": {
            "description": "An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).\n",
            "type": "integer",
            "nullable": true
          },
          "n": {
            "type": "integer",
            "minimum": 1,
            "maximum": 128,
            "default": 1,
            "example": 1,
            "nullable": true,
            "description": "How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs."
          },
          "modalities": {
            "$ref": "#/components/schemas/ChatCompletionModalities"
          },
          "prediction": {
            "nullable": true,
            "x-oaiExpandable": true,
            "description": "Configuration for a [Predicted Output](/docs/guides/predicted-outputs),\nwhich can greatly improve response times when large parts of the model\nresponse are known ahead of time. This is most common when you are\nregenerating a file with only minor changes to most of the content.\n",
            "oneOf": [
              {
                "$ref": "#/components/schemas/PredictionContent"
              }
            ]
          },
          "audio": {
            "type": "object",
            "nullable": true,
            "description": "Parameters for audio output. Required when audio output is requested with\n`modalities: [\"audio\"]`. [Learn more](/docs/guides/audio).\n",
            "required": [
              "voice",
              "format"
            ],
            "x-oaiExpandable": true,
            "properties": {
              "voice": {
                "type": "string",
                "enum": [
                  "alloy",
                  "ash",
                  "ballad",
                  "coral",
                  "echo",
                  "sage",
                  "shimmer",
                  "verse"
                ],
                "description": "The voice the model uses to respond. Supported voices are `alloy`,\n`ash`, `ballad`, `coral`, `echo`, `sage`, `shimmer`, and `verse`.\n"
              },
              "format": {
                "type": "string",
                "enum": [
                  "wav",
                  "mp3",
                  "flac",
                  "opus",
                  "pcm16"
                ],
                "description": "Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,\n`opus`, or `pcm16`.\n"
              }
            }
          },
          "presence_penalty": {
            "type": "number",
            "default": 0,
            "minimum": -2,
            "maximum": 2,
            "nullable": true,
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.\n\n[See more information about frequency and presence penalties.](/docs/guides/text-generation)\n"
          },
          "response_format": {
            "description": "An object specifying the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4o mini](/docs/models#gpt-4o-mini), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n"
          },
          "seed": {
            "type": "integer",
            "minimum": -9223372036854776000,
            "maximum": 9223372036854776000,
            "nullable": true,
            "description": "This feature is in Beta.\nIf specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.\nDeterminism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.\n",
            "x-oaiMeta": {
              "beta": true
            }
          },
          "service_tier": {
            "description": "Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:\n  - If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they are exhausted.\n  - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.\n  - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.\n  - When not set, the default behavior is 'auto'.\n\n  When this parameter is set, the response body will include the `service_tier` utilized.\n",
            "type": "string",
            "enum": [
              "auto",
              "default"
            ],
            "nullable": true,
            "default": "auto"
          },
          "stop": {
            "description": "Up to 4 sequences where the API will stop generating further tokens.\n",
            "default": null,
            "oneOf": [
              {
                "type": "string",
                "nullable": true
              },
              {
                "type": "array",
                "minItems": 1,
                "maxItems": 4,
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "stream": {
            "description": "If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message.",
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "stream_options": {
            "$ref": "#/components/schemas/ChatCompletionStreamOptions"
          },
          "temperature": {
            "type": "number",
            "minimum": 0,
            "maximum": 2,
            "default": 1,
            "example": 1,
            "nullable": true,
            "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n\nWe generally recommend altering this or `top_p` but not both.\n"
          },
          "top_p": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "default": 1,
            "example": 1,
            "nullable": true,
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or `temperature` but not both.\n"
          },
          "tools": {
            "type": "array",
            "description": "A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.\n",
            "items": {
              "$ref": "#/components/schemas/ChatCompletionTool"
            }
          },
          "tool_choice": {
            "$ref": "#/components/schemas/ChatCompletionToolChoiceOption"
          },
          "parallel_tool_calls": {
            "$ref": "#/components/schemas/ParallelToolCalls"
          },
          "user": {
            "type": "string",
            "example": "user-1234",
            "description": "A unique identifier representing your end-user."
          },
          "function_call": {
            "deprecated": true,
            "description": "Deprecated in favor of `tool_choice`.\n\nControls which (if any) function is called by the model.\n`none` means the model will not call a function and instead generates a message.\n`auto` means the model can pick between generating a message or calling a function.\nSpecifying a particular function via `{\"name\": \"my_function\"}` forces the model to call that function.\n\n`none` is the default when no functions are present. `auto` is the default if functions are present.\n",
            "oneOf": [
              {
                "type": "string",
                "description": "`none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.\n",
                "enum": [
                  "none",
                  "auto"
                ]
              },
              {
                "$ref": "#/components/schemas/ChatCompletionFunctionCallOption"
              }
            ],
            "x-oaiExpandable": true
          },
          "functions": {
            "deprecated": true,
            "description": "Deprecated in favor of `tools`.\n\nA list of functions the model may generate JSON inputs for.\n",
            "type": "array",
            "minItems": 1,
            "maxItems": 128,
            "items": {
              "$ref": "#/components/schemas/ChatCompletionFunctions"
            }
          }
        },
        "required": [
          "model",
          "messages"
        ]
      },
      "CreateChatCompletionResponse": {
        "type": "object",
        "description": "Represents a chat completion response returned by model, based on the provided input.",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the chat completion."
          },
          "choices": {
            "type": "array",
            "description": "A list of chat completion choices. Can be more than one if `n` is greater than 1.",
            "items": {
              "type": "object",
              "required": [
                "finish_reason",
                "index",
                "message",
                "logprobs"
              ],
              "properties": {
                "finish_reason": {
                  "type": "string",
                  "description": "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\n`content_filter` if content was omitted due to a flag from our content filters,\n`tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.\n",
                  "enum": [
                    "stop",
                    "length",
                    "tool_calls",
                    "content_filter",
                    "function_call"
                  ]
                },
                "index": {
                  "type": "integer",
                  "description": "The index of the choice in the list of choices."
                },
                "message": {
                  "$ref": "#/components/schemas/ChatCompletionResponseMessage"
                },
                "logprobs": {
                  "description": "Log probability information for the choice.",
                  "type": "object",
                  "nullable": true,
                  "properties": {
                    "content": {
                      "description": "A list of message content tokens with log probability information.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ChatCompletionTokenLogprob"
                      },
                      "nullable": true
                    },
                    "refusal": {
                      "description": "A list of message refusal tokens with log probability information.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ChatCompletionTokenLogprob"
                      },
                      "nullable": true
                    }
                  },
                  "required": [
                    "content",
                    "refusal"
                  ]
                }
              }
            }
          },
          "created": {
            "type": "integer",
            "description": "The Unix timestamp (in seconds) of when the chat completion was created."
          },
          "model": {
            "type": "string",
            "description": "The model used for the chat completion."
          },
          "service_tier": {
            "description": "The service tier used for processing the request. This field is only included if the `service_tier` parameter is specified in the request.",
            "type": "string",
            "enum": [
              "scale",
              "default"
            ],
            "example": "scale",
            "nullable": true
          },
          "system_fingerprint": {
            "type": "string",
            "description": "This fingerprint represents the backend configuration that the model runs with.\n\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.\n"
          },
          "object": {
            "type": "string",
            "description": "The object type, which is always `chat.completion`.",
            "enum": [
              "chat.completion"
            ]
          },
          "usage": {
            "$ref": "#/components/schemas/CompletionUsage"
          }
        },
        "required": [
          "choices",
          "created",
          "id",
          "model",
          "object"
        ],
        "x-oaiMeta": {
          "name": "The chat completion object",
          "group": "chat",
          "example": "{\n  \"id\": \"chatcmpl-123456\",\n  \"object\": \"chat.completion\",\n  \"created\": 1728933352,\n  \"model\": \"gpt-4o-2024-08-06\",\n  \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \"Hi there! How can I assist you today?\",\n        \"refusal\": null\n      },\n      \"logprobs\": null,\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 19,\n    \"completion_tokens\": 10,\n    \"total_tokens\": 29,\n    \"prompt_tokens_details\": {\n      \"cached_tokens\": 0\n    },\n    \"completion_tokens_details\": {\n      \"reasoning_tokens\": 0,\n      \"accepted_prediction_tokens\": 0,\n      \"rejected_prediction_tokens\": 0\n    }\n  },\n  \"system_fingerprint\": \"fp_6b68a8204b\"\n}\n"
        }
      },
      "ExecuteRequest": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "The query to be executed.",
            "example": "SELECT * FROM langdb.models;"
          },
          "params": {
            "description": "Parameters required for the action",
            "oneOf": [
              {
                "type": "object",
                "description": "An empty object",
                "properties": {},
                "additionalProperties": false
              },
              {
                "type": "object",
                "description": "An object with string properties",
                "additionalProperties": {
                  "type": "string"
                }
              }
            ]
          }
        },
        "required": [
          "query"
        ]
      },
      "ExecuteResponse": {
        "type": "object",
        "description": "Result of the executed action",
        "properties": {
          "data": {
            "type": "object",
            "description": "The result data returned by the action"
          },
          "message": {
            "type": "string",
            "description": "Optional message or status information"
          }
        },
        "additionalProperties": true
      },
      "GetAccessTokenRequest": {
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "description": "Client ID provided during app registration"
          },
          "client_secret": {
            "type": "string",
            "description": "Client secret provided during app registration"
          },
          "grant_type": {
            "type": "string",
            "description": "The grant type requesting the token. Only 'client_credentials' is supported.",
            "enum": [
              "client_credentials"
            ],
            "default": "client_credentials"
          }
        },
        "required": [
          "client_id",
          "client_secret",
          "grant_type"
        ]
      },
      "AccessTokenResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "Access token issued by the authorization server"
          },
          "expires_in": {
            "type": "integer",
            "description": "Lifetime in seconds of the access token"
          },
          "token_type": {
            "type": "string",
            "description": "Type of the token issued",
            "example": "Bearer"
          },
          "refresh_token": {
            "type": "string",
            "description": "Refresh token which can be used to obtain new access tokens using the same authorization grant"
          },
          "id_token": {
            "type": "string",
            "description": "ID Token containing user identity claims"
          }
        },
        "required": [
          "access_token",
          "expires_in",
          "token_type"
        ]
      },
      "FetchResourceRequest": {
        "type": "object",
        "description": "Parameters required to fetch the resource",
        "additionalProperties": {
          "type": "string"
        }
      },
      "FetchResourceResponse": {
        "type": "object",
        "description": "Result of the resource execution",
        "additionalProperties": true
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message describing what went wrong."
          },
          "code": {
            "type": "string",
            "description": "Error code representing the type of error."
          }
        },
        "required": [
          "error",
          "code"
        ]
      },
      "FetchMappedDataRequest": {
        "type": "object",
        "properties": {
          "virtual_table_name": {
            "type": "string",
            "description": "Name of the virtual table to fetch data from"
          },
          "params": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Parameters required to fetch the mapped data"
          }
        },
        "required": [
          "virtual_table_name",
          "params"
        ]
      },
      "DataIntegration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the integration."
          },
          "integration_name": {
            "type": "string",
            "description": "Name of the integration."
          },
          "state": {
            "type": "string",
            "description": "Current state of the integration (e.g., enabled, disabled).",
            "enum": [
              "enabled",
              "disabled"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the integration was created."
          },
          "config": {
            "type": "object",
            "description": "Configuration details for the integration.",
            "additionalProperties": true
          }
        },
        "required": [
          "id",
          "integration_name",
          "config",
          "state",
          "created_at"
        ]
      },
      "Integration": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the integration."
          },
          "auth_type": {
            "type": "string",
            "description": "Type of authentication required by the integration.",
            "enum": [
              "oauth",
              "native"
            ]
          },
          "required_inputs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of required input fields for the integration."
          }
        },
        "required": [
          "name",
          "auth_type",
          "required_inputs"
        ]
      },
      "IntegrationAction": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique identifier for the action."
          },
          "description": {
            "type": "string",
            "description": "Human-readable description of the action."
          },
          "input_schema": {
            "type": "string",
            "description": "JSON Schema for validating inputs.",
            "nullable": true
          },
          "output_schema": {
            "type": "string",
            "description": "JSON Schema for validating outputs.",
            "nullable": true
          }
        },
        "required": [
          "name",
          "description"
        ]
      },
      "ChatCompletionRequest": {
        "type": "object",
        "properties": {
          "model": {
            "type": "string",
            "description": "The model to use for generating the completion."
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatCompletionMessage"
            },
            "description": "The messages to include in the conversation."
          },
          "temperature": {
            "type": "number",
            "description": "Sampling temperature between 0 and 2.",
            "default": 1
          },
          "top_p": {
            "type": "number",
            "description": "Nucleus sampling probability between 0 and 1.",
            "default": 1
          },
          "max_tokens": {
            "type": "integer",
            "description": "Maximum number of tokens to generate."
          },
          "presence_penalty": {
            "type": "number",
            "description": "Penalty for new tokens based on their presence in the text so far.",
            "default": 0
          },
          "frequency_penalty": {
            "type": "number",
            "description": "Penalty for new tokens based on their frequency in the text so far.",
            "default": 0
          },
          "user": {
            "type": "string",
            "description": "Unique identifier representing your end-user."
          },
          "functions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunctionDefinition"
            },
            "description": "List of functions the model may generate JSON inputs for."
          },
          "seed": {
            "type": "integer",
            "description": "Seed for random number generation."
          }
        },
        "required": [
          "model",
          "messages"
        ]
      },
      "ChatCompletionMessage": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "The role of the message sender.",
            "enum": [
              "system",
              "user",
              "assistant"
            ]
          },
          "content": {
            "type": "string",
            "description": "The content of the message."
          },
          "name": {
            "type": "string",
            "description": "Optional name of the user in a multi-user chat."
          },
          "function_call": {
            "type": "object",
            "description": "Function call details if the assistant called a function."
          }
        },
        "required": [
          "role",
          "content"
        ]
      },
      "FunctionDefinition": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the function."
          },
          "description": {
            "type": "string",
            "description": "A description of what the function does."
          },
          "parameters": {
            "type": "object",
            "description": "JSON Schema defining the parameters the function accepts."
          }
        },
        "required": [
          "name",
          "description"
        ]
      },
      "ChatCompletionResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the completion."
          },
          "object": {
            "type": "string",
            "description": "The object type, e.g., 'chat.completion'."
          },
          "created": {
            "type": "integer",
            "description": "Timestamp of completion creation."
          },
          "model": {
            "type": "string",
            "description": "The model used for the completion."
          },
          "choices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatCompletionChoice"
            },
            "description": "List of completion choices."
          },
          "usage": {
            "$ref": "#/components/schemas/ChatCompletionUsage",
            "description": "Token usage statistics."
          }
        },
        "required": [
          "id",
          "object",
          "created",
          "model",
          "choices",
          "usage"
        ]
      },
      "ChatCompletionChoice": {
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "description": "The choice index."
          },
          "message": {
            "$ref": "#/components/schemas/ChatCompletionMessage",
            "description": "The message returned by the model."
          },
          "finish_reason": {
            "type": "string",
            "description": "The reason why the completion finished."
          }
        },
        "required": [
          "index",
          "message"
        ]
      },
      "ChatCompletionUsage": {
        "type": "object",
        "properties": {
          "prompt_tokens": {
            "type": "integer",
            "description": "Number of tokens in the prompt."
          },
          "completion_tokens": {
            "type": "integer",
            "description": "Number of tokens in the completion."
          },
          "total_tokens": {
            "type": "integer",
            "description": "Total number of tokens used."
          }
        },
        "required": [
          "prompt_tokens",
          "completion_tokens",
          "total_tokens"
        ]
      },
      "ResponseFormatJsonObject": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of response format being defined: `json_object`",
            "enum": [
              "json_object"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "ResponseFormatJsonSchema": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of response format being defined: `json_schema`",
            "enum": [
              "json_schema"
            ]
          },
          "json_schema": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "description": "A description of what the response format is for, used by the model to determine how to respond in the format."
              },
              "name": {
                "type": "string",
                "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
              },
              "schema": {
                "$ref": "#/components/schemas/ResponseFormatJsonSchemaSchema"
              },
              "strict": {
                "type": "boolean",
                "nullable": true,
                "default": false,
                "description": "Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`. To learn more, read the [Structured Outputs guide](/docs/guides/structured-outputs)."
              }
            },
            "required": [
              "type",
              "name"
            ]
          }
        },
        "required": [
          "type",
          "json_schema"
        ]
      },
      "ResponseFormatJsonSchemaSchema": {
        "type": "object",
        "description": "The schema for the response format, described as a JSON Schema object.",
        "additionalProperties": true
      },
      "ResponseFormatText": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of response format being defined: `text`",
            "enum": [
              "text"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "QueryResult": {
        "type": "object",
        "description": "Result of the executed query.",
        "additionalProperties": true
      },
      "ChatCompletionFunctionCallOption": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the function to call."
          },
          "arguments": {
            "type": "string",
            "description": "The arguments to call the function with, as generated by the model in JSON format."
          }
        },
        "required": [
          "name",
          "arguments"
        ]
      },
      "ChatCompletionFunctions": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the function to call."
          },
          "description": {
            "type": "string",
            "description": "A description of what the function does, used by the model to choose when and how to call the function."
          },
          "parameters": {
            "type": "object",
            "description": "The parameters the functions accepts, described as a JSON Schema object."
          }
        },
        "required": [
          "name",
          "parameters"
        ]
      },
      "ChatCompletionMessageToolCall": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "function"
            ]
          },
          "function": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the function to call."
              },
              "arguments": {
                "type": "string",
                "description": "The arguments to call the function with, as generated by the model in JSON format."
              },
              "output": {
                "type": "string",
                "nullable": true,
                "description": "The output of the function call, as provided in the run step."
              }
            },
            "required": [
              "name",
              "arguments"
            ]
          }
        },
        "required": [
          "id",
          "type",
          "function"
        ]
      },
      "ChatCompletionMessageToolCalls": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ChatCompletionMessageToolCall"
        }
      },
      "ChatCompletionModalities": {
        "type": "array",
        "description": "A list of modalities to include in the response.",
        "items": {
          "type": "string",
          "enum": [
            "text",
            "audio",
            "image",
            "vision"
          ]
        },
        "minItems": 1
      },
      "ChatCompletionNamedToolChoice": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "function"
            ]
          },
          "function": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the function to call."
              }
            },
            "required": [
              "name"
            ]
          }
        },
        "required": [
          "type",
          "function"
        ]
      },
      "ChatCompletionRequestAssistantMessage": {
        "type": "object",
        "title": "Assistant message",
        "properties": {
          "content": {
            "oneOf": [
              {
                "type": "string",
                "nullable": true
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChatCompletionRequestAssistantMessageContentPart"
                }
              }
            ]
          },
          "role": {
            "type": "string",
            "enum": [
              "assistant"
            ]
          },
          "tool_calls": {
            "$ref": "#/components/schemas/ChatCompletionMessageToolCalls"
          },
          "name": {
            "type": "string",
            "description": "An optional name for the participant. Provides the model information about who is speaking."
          }
        },
        "required": [
          "role"
        ]
      },
      "ChatCompletionRequestAssistantMessageContentPart": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ChatCompletionRequestMessageContentPartText"
          },
          {
            "$ref": "#/components/schemas/ChatCompletionRequestMessageContentPartRefusal"
          }
        ]
      },
      "ChatCompletionRequestFunctionMessage": {
        "type": "object",
        "title": "Function message",
        "properties": {
          "content": {
            "type": "string",
            "description": "The contents of the function message."
          },
          "role": {
            "type": "string",
            "enum": [
              "function"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the function to call."
          }
        },
        "required": [
          "content",
          "role",
          "name"
        ]
      },
      "ChatCompletionRequestMessage": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ChatCompletionRequestSystemMessage"
          },
          {
            "$ref": "#/components/schemas/ChatCompletionRequestUserMessage"
          },
          {
            "$ref": "#/components/schemas/ChatCompletionRequestAssistantMessage"
          },
          {
            "$ref": "#/components/schemas/ChatCompletionRequestToolMessage"
          },
          {
            "$ref": "#/components/schemas/ChatCompletionRequestFunctionMessage"
          }
        ]
      },
      "ChatCompletionRequestMessageContentPartAudio": {
        "type": "object",
        "title": "Audio content part",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "audio_url"
            ]
          },
          "audio_url": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "pattern": "^https?://",
                "description": "The URL of the audio file."
              }
            },
            "required": [
              "url"
            ]
          }
        },
        "required": [
          "type",
          "audio_url"
        ]
      },
      "ChatCompletionRequestMessageContentPartImage": {
        "type": "object",
        "title": "Image content part",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "image_url"
            ]
          },
          "image_url": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "pattern": "^https?://",
                "description": "Either a URL of the image or the base64 encoded image data."
              },
              "detail": {
                "type": "string",
                "enum": [
                  "auto",
                  "low",
                  "high"
                ],
                "default": "auto",
                "description": "Controls how the model processes the image and the detail of analysis it performs."
              }
            },
            "required": [
              "url"
            ]
          }
        },
        "required": [
          "type",
          "image_url"
        ]
      },
      "ChatCompletionRequestMessageContentPartText": {
        "type": "object",
        "title": "Text content part",
        "description": "Learn about [text inputs](/docs/guides/text-generation).\n",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "text"
            ],
            "description": "The type of the content part."
          },
          "text": {
            "type": "string",
            "description": "The text content."
          }
        },
        "required": [
          "type",
          "text"
        ]
      },
      "ChatCompletionRequestMessageContentPartRefusal": {
        "type": "object",
        "title": "Refusal content part",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "refusal"
            ]
          },
          "refusal": {
            "type": "object",
            "properties": {
              "category": {
                "type": "string",
                "enum": [
                  "content_policy",
                  "privacy_policy",
                  "other"
                ],
                "description": "The category of refusal."
              },
              "explanation": {
                "type": "string",
                "description": "A human-readable explanation of the refusal."
              }
            },
            "required": [
              "category",
              "explanation"
            ]
          }
        },
        "required": [
          "type",
          "refusal"
        ]
      },
      "ChatCompletionRequestSystemMessage": {
        "type": "object",
        "title": "System message",
        "properties": {
          "content": {
            "description": "The contents of the system message.",
            "oneOf": [
              {
                "type": "string",
                "description": "The contents of the system message.",
                "title": "Text content"
              },
              {
                "type": "array",
                "description": "An array of content parts with a defined type. For system messages, only type `text` is supported.",
                "title": "Array of content parts",
                "items": {
                  "$ref": "#/components/schemas/ChatCompletionRequestSystemMessageContentPart"
                },
                "minItems": 1
              }
            ]
          },
          "role": {
            "type": "string",
            "enum": [
              "system"
            ],
            "description": "The role of the messages author, in this case `system`."
          },
          "name": {
            "type": "string",
            "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role."
          }
        },
        "required": [
          "content",
          "role"
        ]
      },
      "ChatCompletionRequestToolMessage": {
        "type": "object",
        "title": "Tool message",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "tool"
            ],
            "description": "The role of the messages author, in this case `tool`."
          },
          "content": {
            "oneOf": [
              {
                "type": "string",
                "description": "The contents of the tool message.",
                "title": "Text content"
              },
              {
                "type": "array",
                "description": "An array of content parts with a defined type. For tool messages, only type `text` is supported.",
                "title": "Array of content parts",
                "items": {
                  "$ref": "#/components/schemas/ChatCompletionRequestToolMessageContentPart"
                },
                "minItems": 1
              }
            ],
            "description": "The contents of the tool message."
          },
          "tool_call_id": {
            "type": "string",
            "description": "Tool call that this message is responding to."
          }
        },
        "required": [
          "role",
          "content",
          "tool_call_id"
        ]
      },
      "ChatCompletionRequestUserMessage": {
        "type": "object",
        "title": "User message",
        "properties": {
          "content": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ChatCompletionRequestMessageContentPartText"
                    },
                    {
                      "$ref": "#/components/schemas/ChatCompletionRequestMessageContentPartImage"
                    },
                    {
                      "$ref": "#/components/schemas/ChatCompletionRequestMessageContentPartAudio"
                    }
                  ],
                  "x-oaiExpandable": true
                }
              }
            ]
          },
          "role": {
            "type": "string",
            "enum": [
              "user"
            ]
          },
          "name": {
            "type": "string",
            "description": "An optional name for the participant. Provides the model information about who is speaking."
          }
        },
        "required": [
          "content",
          "role"
        ]
      },
      "ChatCompletionResponseMessage": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "assistant",
              "tool"
            ]
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "tool_calls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatCompletionMessageToolCall"
            }
          },
          "function_call": {
            "$ref": "#/components/schemas/ChatCompletionFunctionCallOption"
          }
        },
        "required": [
          "role"
        ]
      },
      "ChatCompletionStreamOptions": {
        "description": "Options for streaming response. Only set this when you set `stream: true`",
        "type": "object",
        "properties": {
          "chunk_size": {
            "type": "integer",
            "minimum": 1,
            "maximum": 4096,
            "default": 1024,
            "description": "The number of tokens to generate before sending a chunk to the client."
          },
          "max_chunks": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 10,
            "description": "The maximum number of chunks to generate."
          },
          "stop_on_function_call": {
            "type": "boolean",
            "default": false,
            "description": "If true, stop generating when a function call is generated."
          }
        }
      },
      "ChatCompletionTool": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "function"
            ],
            "description": "The type of the tool. Currently, only `function` is supported."
          },
          "function": {
            "$ref": "#/components/schemas/FunctionObject"
          }
        },
        "required": [
          "type",
          "function"
        ]
      },
      "ChatCompletionToolChoiceOption": {
        "description": "Controls which (if any) tool is called by the model. `none` means the model will not call any tool and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools. Specifying a particular tool via `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool. `none` is the default when no tools are present. `auto` is the default if tools are present.\n",
        "oneOf": [
          {
            "type": "string",
            "description": "`none` means the model will not call any tool and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools.\n",
            "enum": [
              "none",
              "auto",
              "required"
            ]
          },
          {
            "$ref": "#/components/schemas/ChatCompletionNamedToolChoice"
          }
        ],
        "x-oaiExpandable": true
      },
      "ChatCompletionRequestSystemMessageContentPart": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ChatCompletionRequestMessageContentPartText"
          }
        ],
        "x-oaiExpandable": true
      },
      "ChatCompletionRequestToolMessageContentPart": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ChatCompletionRequestMessageContentPartText"
          }
        ],
        "x-oaiExpandable": true
      },
      "ParallelToolCalls": {
        "type": "integer",
        "description": "The maximum number of tool calls that can be made in parallel. If not set, defaults to 1. Set this to a number greater than 1 to enable parallel tool calls.\n",
        "minimum": 1,
        "default": 1
      },
      "ChatCompletionTokenLogprob": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "The token."
          },
          "logprob": {
            "type": "number",
            "description": "The log probability of the token."
          },
          "bytes": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The UTF-8 bytes of the token."
          },
          "top_logprobs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "description": "A potential token."
                },
                "logprob": {
                  "type": "number",
                  "description": "The log probability of the token."
                },
                "bytes": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "description": "The UTF-8 bytes of the token."
                }
              },
              "required": [
                "token",
                "logprob"
              ]
            },
            "description": "Top tokens and their log probabilities."
          }
        },
        "required": [
          "token",
          "logprob",
          "bytes"
        ]
      },
      "FunctionObject": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A description of what the function does, used by the model to choose when and how to call the function."
          },
          "name": {
            "type": "string",
            "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
          },
          "parameters": {
            "$ref": "#/components/schemas/FunctionParameters"
          },
          "strict": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling)."
          }
        },
        "required": [
          "name"
        ]
      },
      "FunctionParameters": {
        "type": "object",
        "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list.",
        "additionalProperties": true
      },
      "Image": {
        "type": "object",
        "description": "Represents the url or the content of an image generated by the API.",
        "properties": {
          "b64_json": {
            "type": "string",
            "description": "The base64-encoded JSON of the generated image, if `response_format` is `b64_json`."
          },
          "url": {
            "type": "string",
            "description": "The URL of the generated image, if `response_format` is `url` (default)."
          },
          "revised_prompt": {
            "type": "string",
            "description": "The prompt that was used to generate the image, if there was any revision to the prompt."
          }
        },
        "x-oaiMeta": {
          "name": "The image object",
          "example": "{\n  \"url\": \"...\",\n  \"revised_prompt\": \"...\"\n}\n"
        }
      },
      "CompletionUsage": {
        "type": "object",
        "description": "Usage statistics for the completion request.",
        "properties": {
          "completion_tokens": {
            "type": "integer",
            "description": "Number of tokens in the generated completion."
          },
          "prompt_tokens": {
            "type": "integer",
            "description": "Number of tokens in the prompt."
          },
          "total_tokens": {
            "type": "integer",
            "description": "Total number of tokens used in the request (prompt + completion)."
          },
          "completion_tokens_details": {
            "type": "object",
            "description": "Breakdown of tokens used in a completion.",
            "properties": {
              "accepted_prediction_tokens": {
                "type": "integer",
                "description": "When using Predicted Outputs, the number of tokens in the\nprediction that appeared in the completion.\n"
              },
              "audio_tokens": {
                "type": "integer",
                "description": "Audio input tokens generated by the model."
              },
              "reasoning_tokens": {
                "type": "integer",
                "description": "Tokens generated by the model for reasoning."
              },
              "rejected_prediction_tokens": {
                "type": "integer",
                "description": "When using Predicted Outputs, the number of tokens in the\nprediction that did not appear in the completion. However, like\nreasoning tokens, these tokens are still counted in the total\ncompletion tokens for purposes of billing, output, and context window\nlimits.\n"
              }
            }
          },
          "prompt_tokens_details": {
            "type": "object",
            "description": "Breakdown of tokens used in the prompt.",
            "properties": {
              "audio_tokens": {
                "type": "integer",
                "description": "Audio input tokens present in the prompt."
              },
              "cached_tokens": {
                "type": "integer",
                "description": "Cached tokens present in the prompt."
              }
            }
          }
        },
        "required": [
          "prompt_tokens",
          "completion_tokens",
          "total_tokens"
        ]
      },
      "PredictionContent": {
        "type": "object",
        "title": "Static Content",
        "description": "Static predicted output content, such as the content of a text file that is being regenerated.\n",
        "required": [
          "type",
          "content"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "content"
            ],
            "description": "The type of the predicted content you want to provide. This type is\ncurrently always `content`.\n"
          },
          "content": {
            "x-oaiExpandable": true,
            "description": "The content that should be matched when generating a model response. If generated tokens would match this content, the entire model response can be returned much more quickly.\n",
            "oneOf": [
              {
                "type": "string",
                "title": "Text content",
                "description": "The content used for a Predicted Output. This is often the\ntext of a file you are regenerating with minor changes.\n"
              },
              {
                "type": "array",
                "description": "An array of content parts with a defined type. Supported options differ based on the model being used to generate the response. Can contain text inputs.",
                "title": "Array of content parts",
                "items": {
                  "$ref": "#/components/schemas/ChatCompletionRequestMessageContentPartText"
                },
                "minItems": 1
              }
            ]
          }
        }
      },
      "ListModelsResponse": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Model"
            }
          }
        },
        "required": [
          "object",
          "data"
        ]
      },
      "Model": {
        "title": "Model",
        "description": "Describes an LLM model offering that can be used with the API.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The model identifier, which can be referenced in the API endpoints."
          },
          "created": {
            "type": "integer",
            "description": "The Unix timestamp (in seconds) when the model was created."
          },
          "object": {
            "type": "string",
            "description": "The object type, which is always \"model\".",
            "enum": [
              "model"
            ]
          },
          "owned_by": {
            "type": "string",
            "description": "The organization that owns the model."
          }
        },
        "required": [
          "id",
          "object",
          "created",
          "owned_by"
        ],
        "x-oaiMeta": {
          "name": "The model object",
          "example": "{\n  \"id\": \"VAR_model_id\",\n  \"object\": \"model\",\n  \"created\": 1686935002,\n  \"owned_by\": \"openai\"\n}\n"
        }
      },
      "TraceResponse": {
        "type": "object",
        "description": "Represents one span within a trace",
        "properties": {
          "trace_id": {
            "type": "string",
            "description": "The unique trace ID (UUID)."
          },
          "span_id": {
            "type": "integer",
            "description": "The unique span ID."
          },
          "parent_span_id": {
            "type": "integer",
            "description": "The span ID of the parent span."
          },
          "operation_name": {
            "type": "string",
            "description": "The name of the operation (e.g., 'model_call', 'api_invoke')."
          },
          "kind": {
            "type": "string",
            "description": "The kind of this span (e.g., 'INTERNAL')."
          },
          "start_time_us": {
            "type": "integer",
            "description": "Start time in microseconds."
          },
          "finish_time_us": {
            "type": "integer",
            "description": "Finish time in microseconds."
          },
          "attribute": {
            "type": "object",
            "description": "Key-value data or metadata about this span.",
            "additionalProperties": true
          }
        },
        "required": [
          "trace_id",
          "span_id",
          "parent_span_id",
          "operation_name",
          "kind",
          "start_time_us",
          "finish_time_us",
          "attribute"
        ]
      },
      "ModelPricing": {
        "type": "object",
        "properties": {
          "model": {
            "type": "string",
            "example": "gpt-3.5-turbo-0125"
          },
          "provider": {
            "type": "string",
            "example": "openai"
          },
          "price": {
            "$ref": "#/components/schemas/PriceDetails"
          },
          "input_formats": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "text"
            ]
          },
          "output_formats": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "text"
            ]
          },
          "capabilities": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "tools"
            ]
          },
          "type": {
            "type": "string",
            "example": "completions"
          },
          "limits": {
            "$ref": "#/components/schemas/UsageLimits"
          }
        }
      },
      "PriceDetails": {
        "type": "object",
        "properties": {
          "per_input_token": {
            "type": "number",
            "format": "float",
            "example": 0.5
          },
          "per_output_token": {
            "type": "number",
            "format": "float",
            "example": 1.5
          },
          "valid_from": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": null
          }
        }
      },
      "UsageLimits": {
        "type": "object",
        "properties": {
          "max_context_size": {
            "type": "integer",
            "example": 16385
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Chat",
      "description": "API for chat completions"
    }
  ]
}